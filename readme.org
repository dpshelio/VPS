* Visualiser of Positional Astronomy concepts
#+begin_src python
  import matplotlib.pyplot as plt
  import numpy as np

  from matplotlib.patches import Circle, PathPatch, FancyArrowPatch
  from matplotlib.text import TextPath
  from matplotlib.transforms import Affine2D
  import mpl_toolkits.mplot3d.art3d as art3d
  def text3d(ax, xyz, s, zdir="z", size=None, angle=0, usetex=False, **kwargs):
      """
      Plots the string *s* on the axes *ax*, with position *xyz*, size *size*,
      and rotation angle *angle*. *zdir* gives the axis which is to be treated as
      the third dimension. *usetex* is a boolean indicating whether the string
      should be run through a LaTeX subprocess or not.  Any additional keyword
      arguments are forwarded to `.transform_path`.

      Note: zdir affects the interpretation of xyz.
      """
      x, y, z = xyz
      if zdir == "y":
          xy1, z1 = (x, z), y
      elif zdir == "x":
          xy1, z1 = (y, z), x
      else:
          xy1, z1 = (x, y), z

      text_path = TextPath((0, 0), s, size=size, usetex=usetex)
      trans = Affine2D().rotate(angle).translate(xy1[0], xy1[1])
      # FIXME modify it so the cordinate given is the center, not the starting point.

      p1 = PathPatch(trans.transform_path(text_path), **kwargs)
      ax.add_patch(p1)
      art3d.pathpatch_2d_to_3d(p1, z=z1, zdir=zdir)
  fig = plt.figure()
  ax = fig.add_subplot(projection='3d')

  # Draw a circle for the horizont
  p = Circle((5, 5), 5, alpha=0.5)
  ax.add_patch(p)
  art3d.pathpatch_2d_to_3d(p, z=0, zdir="z")

  # Draw great circle NZS
  p = Circle((5, 0), 5, fill=False, linestyle='-')
  ax.add_patch(p)
  art3d.pathpatch_2d_to_3d(p, z=5, zdir="y")
  # Draw great circle EZW
  p = Circle((5, 0), 5, fill=False, linestyle=':')
  ax.add_patch(p)
  art3d.pathpatch_2d_to_3d(p, z=5, zdir="x")

  # Add labels N, E, S, W, Z
  text3d(ax, (-0.5, 5, 0), zdir="y",
         s="N",
         size=0.5,
         usetex=False,
         ec="none", fc="k")
  text3d(ax, (5, 10.5, 0), zdir="y",
         s="E",
         size=0.5,
         usetex=False,
         ec="none", fc="k")
  text3d(ax, (10.5, 5, 0), zdir="y",
         s="S",
         size=0.5,
         usetex=False,
         ec="none", fc="k")
  text3d(ax, (5, -0.5, 0), zdir="y",
         s="W",
         size=0.5,
         usetex=False,
         ec="none", fc="k")
  text3d(ax, (5,5, 5.2), zdir="y",
         s="Z",
         size=0.5,
         usetex=False,
         ec="none", fc="k")

  ax.set_xlim(-1, 11)
  ax.set_ylim(-1, 11)
  ax.set_zlim(-6, 6)
  ax.set_aspect('equal')
  plt.show()
